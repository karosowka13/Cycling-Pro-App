{"ast":null,"code":"var _jsxFileName = \"/media/karolina/Nowy/EAiIB/magiterka/Thesis/app/src/containers/Authentication/Authentication.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions/index\";\nimport validate from \"../../components/Validation/Input/Validate\";\nimport TextInput from \"../../components/UI/TextInput/TextInput\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Authentication.module.css\";\n\nclass Authentication extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isSignUp: true,\n      loading: false,\n      dataIsValid: false,\n      formData: {\n        email: {\n          value: \"\",\n          placeholder: \"name@domain.com\",\n          valid: false,\n          touched: false,\n          validationRules: {\n            isEmail: false,\n            isRequired: true\n          }\n        },\n        password: {\n          value: \"\",\n          placeholder: \"minimum 8 characters\",\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 8,\n            isRequired: true\n          }\n        }\n      }\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault(); //prevent reload of the page\n\n      this.setState({\n        loading: true\n      });\n      const formAuth = {}; // add only the input to send it to DB\n\n      for (let formElementIdentifier in this.state.formData) {\n        formAuth[formElementIdentifier] = this.state.formData[formElementIdentifier].value;\n        this.props.onAuth(formAuth, this.state.isSignUp);\n      }\n    };\n\n    this.changeHandler = (event, formElementName) => {\n      const name = formElementName;\n      const value = event.target.value;\n      const updatedData = { ...this.state.formData\n      };\n      const updatedDataElement = { ...updatedData[name]\n      };\n      updatedDataElement.value = value;\n      updatedDataElement.touched = true && value !== \"\";\n      updatedDataElement.valid = validate(value, updatedDataElement.validationRules);\n      updatedData[name] = updatedDataElement;\n      let dataIsValid = true;\n\n      for (let inputIdentifier in updatedData) {\n        dataIsValid = updatedData[inputIdentifier].valid && dataIsValid;\n      }\n\n      this.setState({\n        dataIsValid: dataIsValid,\n        formData: updatedData\n      });\n    };\n  }\n\n  render() {\n    const formElementArray = [];\n\n    for (let key in this.state.formData) {\n      formElementArray.push({\n        id: key,\n        config: this.state.formData[key]\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Form,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, params.type)), formElementArray.map(formElement => /*#__PURE__*/React.createElement(TextInput, {\n      key: formElement.id,\n      type: formElement.id,\n      label: formElement.id,\n      value: formElement.config.value,\n      placeholder: formElement.config.placeholder,\n      touched: formElement.config.touched,\n      valid: formElement.config.valid,\n      onChange: event => this.changeHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.RememberForgotBox,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, \"Remember Me\"), /*#__PURE__*/React.createElement(Link, {\n      className: classes.ForgotLink,\n      to: \"/recoverpassword\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, \"Forgot Password?\")), /*#__PURE__*/React.createElement(Button, {\n      disabled: !this.state.dataIsValid,\n      onClick: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }, \"Sign up\")));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Authentication);","map":{"version":3,"sources":["/media/karolina/Nowy/EAiIB/magiterka/Thesis/app/src/containers/Authentication/Authentication.js"],"names":["React","Component","Link","connect","actions","validate","TextInput","Button","classes","Authentication","state","isSignUp","loading","dataIsValid","formData","email","value","placeholder","valid","touched","validationRules","isEmail","isRequired","password","minLength","submitHandler","event","preventDefault","setState","formAuth","formElementIdentifier","props","onAuth","changeHandler","formElementName","name","target","updatedData","updatedDataElement","inputIdentifier","render","formElementArray","key","push","id","config","Form","params","type","map","formElement","RememberForgotBox","ForgotLink","mapDispatchToProps","dispatch","auth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport * as actions from \"../../store/actions/index\";\n\nimport validate from \"../../components/Validation/Input/Validate\";\nimport TextInput from \"../../components/UI/TextInput/TextInput\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Authentication.module.css\";\n\nclass Authentication extends Component {\n  state = {\n    isSignUp: true,\n    loading: false,\n    dataIsValid: false,\n    formData: {\n      email: {\n        value: \"\",\n        placeholder: \"name@domain.com\",\n        valid: false,\n        touched: false,\n        validationRules: { isEmail: false, isRequired: true },\n      },\n      password: {\n        value: \"\",\n        placeholder: \"minimum 8 characters\",\n        valid: false,\n        touched: false,\n        validationRules: { minLength: 8, isRequired: true },\n      },\n    },\n  };\n\n  submitHandler = (event) => {\n    event.preventDefault(); //prevent reload of the page\n    this.setState({ loading: true });\n    const formAuth = {};\n    // add only the input to send it to DB\n    for (let formElementIdentifier in this.state.formData) {\n      formAuth[formElementIdentifier] = this.state.formData[\n        formElementIdentifier\n      ].value;\n      this.props.onAuth(formAuth, this.state.isSignUp);\n    }\n  };\n\n  changeHandler = (event, formElementName) => {\n    const name = formElementName;\n    const value = event.target.value;\n\n    const updatedData = {\n      ...this.state.formData,\n    };\n\n    const updatedDataElement = {\n      ...updatedData[name],\n    };\n\n    updatedDataElement.value = value;\n    updatedDataElement.touched = true && value !== \"\";\n    updatedDataElement.valid = validate(\n      value,\n      updatedDataElement.validationRules\n    );\n\n    updatedData[name] = updatedDataElement;\n\n    let dataIsValid = true;\n    for (let inputIdentifier in updatedData) {\n      dataIsValid = updatedData[inputIdentifier].valid && dataIsValid;\n    }\n\n    this.setState({\n      dataIsValid: dataIsValid,\n      formData: updatedData,\n    });\n  };\n\n  render() {\n    const formElementArray = [];\n    for (let key in this.state.formData) {\n      formElementArray.push({ id: key, config: this.state.formData[key] });\n    }\n\n    return (\n      <div className={classes.Form}>\n        <div>\n          <header>\n            <h1>{params.type}</h1>\n          </header>\n          {formElementArray.map((formElement) => (\n            <TextInput\n              key={formElement.id}\n              type={formElement.id}\n              label={formElement.id}\n              value={formElement.config.value}\n              placeholder={formElement.config.placeholder}\n              touched={formElement.config.touched}\n              valid={formElement.config.valid}\n              onChange={(event) => this.changeHandler(event, formElement.id)}\n            />\n          ))}\n\n          <div className={classes.RememberForgotBox}>\n            <input type=\"checkbox\" />\n            <label>Remember Me</label>\n            <Link className={classes.ForgotLink} to=\"/recoverpassword\">\n              Forgot Password?\n            </Link>\n          </div>\n          <Button\n            disabled={!this.state.dataIsValid}\n            onClick={this.submitHandler}\n          >\n            Sign up\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAuth: (email, password, isSignUp) =>\n      dispatch(actions.auth(email, password, isSignUp)),\n  };\n};\nexport default connect(null, mapDispatchToProps)(Authentication);\n"]},"metadata":{},"sourceType":"module"}