{"ast":null,"code":"const validate = (value, rules) => {\n  let isValid = true;\n\n  for (let rule in rules) {\n    switch (rule) {\n      case \"minLength\":\n        isValid = isValid && minLengthValidator(value, rules[rule]);\n        break;\n\n      case \"isRequired\":\n        isValid = isValid && requiredValidator(value);\n        break;\n\n      case \"isEmail\":\n        isValid = isValid && emailValidator(value);\n        break;\n\n      default:\n        isValid = true;\n    }\n  }\n\n  return isValid;\n};\n/**\n * minLength Val\n * @param  value\n * @param  minLength\n * @return\n */\n\n\nconst minLengthValidator = (value, minLength) => {\n  return value.length >= minLength;\n};\n/**\n * Check to confirm that feild is required\n *\n * @param  value\n * @return\n */\n\n\nconst requiredValidator = value => {\n  return value.trim() !== \"\";\n};\n/**\n * Email validation\n *\n * @param value\n * @return\n */\n\n\nconst emailValidator = value => {\n  var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  /* eslint-disable-line */\n\n  return re.test(String(value).toLowerCase());\n};\n\nexport default validate;","map":{"version":3,"sources":["/media/karolina/Nowy/EAiIB/magiterka/Thesis/app/src/components/Validation/Input/Validate.js"],"names":["validate","value","rules","isValid","rule","minLengthValidator","requiredValidator","emailValidator","minLength","length","trim","re","test","String","toLowerCase"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACjC,MAAIC,OAAO,GAAG,IAAd;;AAEA,OAAK,IAAIC,IAAT,IAAiBF,KAAjB,EAAwB;AACtB,YAAQE,IAAR;AACE,WAAK,WAAL;AACED,QAAAA,OAAO,GAAGA,OAAO,IAAIE,kBAAkB,CAACJ,KAAD,EAAQC,KAAK,CAACE,IAAD,CAAb,CAAvC;AACA;;AAEF,WAAK,YAAL;AACED,QAAAA,OAAO,GAAGA,OAAO,IAAIG,iBAAiB,CAACL,KAAD,CAAtC;AACA;;AAEF,WAAK,SAAL;AACEE,QAAAA,OAAO,GAAGA,OAAO,IAAII,cAAc,CAACN,KAAD,CAAnC;AAEA;;AAEF;AACEE,QAAAA,OAAO,GAAG,IAAV;AAfJ;AAiBD;;AAED,SAAOA,OAAP;AACD,CAxBD;AA0BA;;;;;;;;AAMA,MAAME,kBAAkB,GAAG,CAACJ,KAAD,EAAQO,SAAR,KAAsB;AAC/C,SAAOP,KAAK,CAACQ,MAAN,IAAgBD,SAAvB;AACD,CAFD;AAIA;;;;;;;;AAMA,MAAMF,iBAAiB,GAAIL,KAAD,IAAW;AACnC,SAAOA,KAAK,CAACS,IAAN,OAAiB,EAAxB;AACD,CAFD;AAIA;;;;;;;;AAMA,MAAMH,cAAc,GAAIN,KAAD,IAAW;AAChC,MAAIU,EAAE,GAAG,yJAAT;AAAoK;;AACpK,SAAOA,EAAE,CAACC,IAAH,CAAQC,MAAM,CAACZ,KAAD,CAAN,CAAca,WAAd,EAAR,CAAP;AACD,CAHD;;AAKA,eAAed,QAAf","sourcesContent":["const validate = (value, rules) => {\n  let isValid = true;\n\n  for (let rule in rules) {\n    switch (rule) {\n      case \"minLength\":\n        isValid = isValid && minLengthValidator(value, rules[rule]);\n        break;\n\n      case \"isRequired\":\n        isValid = isValid && requiredValidator(value);\n        break;\n\n      case \"isEmail\":\n        isValid = isValid && emailValidator(value);\n\n        break;\n\n      default:\n        isValid = true;\n    }\n  }\n\n  return isValid;\n};\n\n/**\n * minLength Val\n * @param  value\n * @param  minLength\n * @return\n */\nconst minLengthValidator = (value, minLength) => {\n  return value.length >= minLength;\n};\n\n/**\n * Check to confirm that feild is required\n *\n * @param  value\n * @return\n */\nconst requiredValidator = (value) => {\n  return value.trim() !== \"\";\n};\n\n/**\n * Email validation\n *\n * @param value\n * @return\n */\nconst emailValidator = (value) => {\n  var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; /* eslint-disable-line */\n  return re.test(String(value).toLowerCase());\n};\n\nexport default validate;\n"]},"metadata":{},"sourceType":"module"}