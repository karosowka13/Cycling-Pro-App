{"ast":null,"code":"var _jsxFileName = \"/media/karolina/Nowy/EAiIB/magiterka/Thesis/app/src/components/Calendar/Calendar.js\";\nimport React from \"react\";\nimport * as dateFns from \"date-fns\";\nimport Button from \"../UI/Button/Button\";\nimport ButtonIcon from \"../UI/ButtonIcon/ButtonIcon\";\nimport classes from \"./Calendar.module.css\";\n\nclass Calendar extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentMonth: new Date(),\n      selectedDate: new Date()\n    };\n\n    this.onDateClick = day => {\n      this.setState({\n        selectedDate: day\n      });\n    };\n\n    this.nextMonth = () => {\n      this.setState({\n        currentMonth: dateFns.addMonths(this.state.currentMonth, 1)\n      });\n    };\n\n    this.prevMonth = () => {\n      this.setState({\n        currentMonth: dateFns.subMonths(this.state.currentMonth, 1)\n      });\n    };\n  }\n\n  renderHeader() {\n    const dateFormat = \"MMMM Y\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.header,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Previous,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      clicked: this.prevMonth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }\n    }, \"PREV\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Month,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }\n    }, dateFns.format(this.state.currentMonth, dateFormat))), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Next,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ButtonIcon, {\n      btnType: \"\",\n      clicked: this.nextMonth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  renderDays() {\n    const dateFormat = \"EEEE\";\n    const days = [];\n    let startDate = dateFns.startOfWeek(this.state.currentMonth);\n\n    for (let i = 0; i < 7; i++) {\n      days.push( /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.Day,\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }\n      }, dateFns.format(dateFns.addDays(startDate, i), dateFormat)));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Days,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 12\n      }\n    }, days);\n  }\n\n  renderCells() {\n    const {\n      currentMonth,\n      selectedDate\n    } = this.state;\n    const monthStart = dateFns.startOfMonth(currentMonth);\n    const monthEnd = dateFns.endOfMonth(monthStart);\n    const startDate = dateFns.startOfWeek(monthStart);\n    const endDate = dateFns.endOfWeek(monthEnd);\n    const dateFormat = \"d\";\n    const rows = [];\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n\n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        formattedDate = dateFns.format(day, dateFormat);\n        const cloneDay = day;\n        const cellClasses = [classes.Cell];\n\n        if (!dateFns.isSameMonth(day, monthStart)) {\n          cellClasses.push(classes.Disabled);\n        } else if (dateFns.isSameDay(day, selectedDate)) {\n          cellClasses.push(classes.Selected);\n        }\n\n        days.push( /*#__PURE__*/React.createElement(\"div\", {\n          className: cellClasses.join(\" \"),\n          key: day,\n          onClick: () => this.onDateClick(dateFns.parse(cloneDay)),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: classes.Number,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }\n        }, formattedDate), /*#__PURE__*/React.createElement(ButtonIcon, {\n          btnType: \"AddCircleOutlineIcon\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }\n        })));\n        day = dateFns.addDays(day, 1);\n      }\n\n      rows.push( /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.DaysRow,\n        key: day,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }\n      }, days));\n      days = [];\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 12\n      }\n    }, rows);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Calendar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }\n    }, this.renderHeader(), this.renderDays(), this.renderCells());\n  }\n\n}\n\nexport default Calendar;","map":{"version":3,"sources":["/media/karolina/Nowy/EAiIB/magiterka/Thesis/app/src/components/Calendar/Calendar.js"],"names":["React","dateFns","Button","ButtonIcon","classes","Calendar","Component","state","currentMonth","Date","selectedDate","onDateClick","day","setState","nextMonth","addMonths","prevMonth","subMonths","renderHeader","dateFormat","header","Previous","Month","format","Next","renderDays","days","startDate","startOfWeek","i","push","Day","addDays","Days","renderCells","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","formattedDate","cloneDay","cellClasses","Cell","isSameMonth","Disabled","isSameDay","Selected","join","parse","Number","DaysRow","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as dateFns from \"date-fns\";\nimport Button from \"../UI/Button/Button\";\nimport ButtonIcon from \"../UI/ButtonIcon/ButtonIcon\";\nimport classes from \"./Calendar.module.css\";\n\nclass Calendar extends React.Component {\n  state = {\n    currentMonth: new Date(),\n    selectedDate: new Date(),\n  };\n\n  renderHeader() {\n    const dateFormat = \"MMMM Y\";\n\n    return (\n      <div className={classes.header}>\n        <div className={classes.Previous}>\n          <Button clicked={this.prevMonth}>PREV</Button>\n        </div>\n        <div className={classes.Month}>\n          <span>{dateFns.format(this.state.currentMonth, dateFormat)}</span>\n        </div>\n        <div className={classes.Next}>\n          <ButtonIcon btnType=\"\" clicked={this.nextMonth} />\n        </div>\n      </div>\n    );\n  }\n\n  renderDays() {\n    const dateFormat = \"EEEE\";\n    const days = [];\n\n    let startDate = dateFns.startOfWeek(this.state.currentMonth);\n\n    for (let i = 0; i < 7; i++) {\n      days.push(\n        <div className={classes.Day} key={i}>\n          {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\n        </div>\n      );\n    }\n\n    return <div className={classes.Days}>{days}</div>;\n  }\n\n  renderCells() {\n    const { currentMonth, selectedDate } = this.state;\n    const monthStart = dateFns.startOfMonth(currentMonth);\n    const monthEnd = dateFns.endOfMonth(monthStart);\n    const startDate = dateFns.startOfWeek(monthStart);\n    const endDate = dateFns.endOfWeek(monthEnd);\n\n    const dateFormat = \"d\";\n    const rows = [];\n\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n\n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        formattedDate = dateFns.format(day, dateFormat);\n        const cloneDay = day;\n        const cellClasses = [classes.Cell];\n\n        if (!dateFns.isSameMonth(day, monthStart)) {\n          cellClasses.push(classes.Disabled);\n        } else if (dateFns.isSameDay(day, selectedDate)) {\n          cellClasses.push(classes.Selected);\n        }\n\n        days.push(\n          <div\n            className={cellClasses.join(\" \")}\n            key={day}\n            onClick={() => this.onDateClick(dateFns.parse(cloneDay))}\n          >\n            <span className={classes.Number}>{formattedDate}</span>\n            <ButtonIcon btnType=\"AddCircleOutlineIcon\" />\n          </div>\n        );\n        day = dateFns.addDays(day, 1);\n      }\n      rows.push(\n        <div className={classes.DaysRow} key={day}>\n          {days}\n        </div>\n      );\n      days = [];\n    }\n    return <div>{rows}</div>;\n  }\n\n  onDateClick = (day) => {\n    this.setState({\n      selectedDate: day,\n    });\n  };\n\n  nextMonth = () => {\n    this.setState({\n      currentMonth: dateFns.addMonths(this.state.currentMonth, 1),\n    });\n  };\n\n  prevMonth = () => {\n    this.setState({\n      currentMonth: dateFns.subMonths(this.state.currentMonth, 1),\n    });\n  };\n\n  render() {\n    return (\n      <div className={classes.Calendar}>\n        {this.renderHeader()}\n        {this.renderDays()}\n        {this.renderCells()}\n      </div>\n    );\n  }\n}\n\nexport default Calendar;\n"]},"metadata":{},"sourceType":"module"}