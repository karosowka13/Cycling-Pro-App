{"ast":null,"code":"var _jsxFileName = \"/media/karolina/Nowy/EAiIB/magiterka/Thesis/app/src/containers/Authentication/Authentication.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions/index\";\nimport validate from \"../../components/Validation/Input/Validate\";\nimport TextInput from \"../../components/UI/TextInput/TextInput\";\nimport Button from \"../../components/UI/Button/Button\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport classes from \"./Authentication.module.css\";\n\nclass Authentication extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isSignUp: true,\n      loading: false,\n      dataIsValid: false,\n      formData: {\n        email: {\n          value: \"\",\n          placeholder: \"name@domain.com\",\n          valid: false,\n          touched: false,\n          validationRules: {\n            isEmail: false,\n            isRequired: true\n          }\n        },\n        password: {\n          value: \"\",\n          placeholder: \"minimum 8 characters\",\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 8,\n            isRequired: true\n          }\n        }\n      }\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault(); //prevent reload of the page\n\n      this.setState({\n        loading: true\n      });\n      this.props.onAuth(this.state.formData.email.value, this.state.formData.password.value, this.state.isSignUp);\n    };\n\n    this.changeHandler = (event, formElementName) => {\n      const name = formElementName;\n      const value = event.target.value;\n      const updatedData = { ...this.state.formData\n      };\n      const updatedDataElement = { ...updatedData[name]\n      };\n      updatedDataElement.value = value;\n      updatedDataElement.touched = true && value !== \"\";\n      updatedDataElement.valid = validate(value, updatedDataElement.validationRules);\n      updatedData[name] = updatedDataElement;\n      let dataIsValid = true;\n\n      for (let inputIdentifier in updatedData) {\n        dataIsValid = updatedData[inputIdentifier].valid && dataIsValid;\n      }\n\n      this.setState({\n        dataIsValid: dataIsValid,\n        formData: updatedData\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.match.params.type === \"login\") {\n      this.setState({\n        isSignUp: false\n      });\n    } else this.setState({\n      isSignUp: true\n    });\n  }\n\n  render() {\n    let formName = this.props.match.params.type;\n\n    switch (formName) {\n      case \"login\":\n        formName = \"Log in\";\n        break;\n\n      case \"signup\":\n        formName = \"Sign up\";\n        break;\n\n      default:\n        {\n          formName = /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 20\n            }\n          }, \"Error 404\");\n        }\n    }\n\n    const formElementArray = [];\n\n    for (let key in this.state.formData) {\n      formElementArray.push({\n        id: key,\n        config: this.state.formData[key]\n      });\n    }\n\n    let form = formElementArray.map(formElement => /*#__PURE__*/React.createElement(TextInput, {\n      key: formElement.id,\n      type: formElement.id,\n      label: formElement.id,\n      value: formElement.config.value,\n      placeholder: formElement.config.placeholder,\n      touched: formElement.config.touched,\n      valid: formElement.config.valid,\n      onChange: event => this.changeHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }));\n    form.push( /*#__PURE__*/React.createElement(Button, {\n      disabled: !this.state.dataIsValid,\n      clicked: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    }, formName));\n\n    if (!this.state.isSignUp) {\n      form.push( /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.RememberForgotBox,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }\n      }, \"Remember Me\"), /*#__PURE__*/React.createElement(Link, {\n        className: classes.ForgotLink,\n        to: \"/recoverpassword\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }\n      }, \"Forgot Password?\")));\n    }\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 14\n        }\n      });\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      switch (this.props.error.message) {\n        case \"EMAIL_EXISTS\":\n          errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 26\n            }\n          }, \"Email already taken\");\n          break;\n\n        case \"OPERATION_NOT_ALLOWED\":\n          errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 26\n            }\n          }, \"Password is disabled\");\n          break;\n\n        case \"TOO_MANY_ATTEMPTS_TRY_LATER\":\n          errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 26\n            }\n          }, \"Too many attempts, try later\");\n          break;\n\n        case \"EMAIL_NOT_FOUND\":\n          errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 26\n            }\n          }, \"Email not found\");\n          break;\n\n        case \"INVALID_PASSWORD\":\n          errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 26\n            }\n          }, \"Invalid password\");\n          break;\n\n        case \"USER_DISABLED\":\n          errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 26\n            }\n          }, \"User disabled\");\n          break;\n\n        default:\n          errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 26\n            }\n          }, this.props.error.message);\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Form,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }, formName)), errorMessage, form));\n  }\n\n}\n\nconst mapStateToPtops = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp))\n  };\n};\n\nexport default connect(mapStateToPtops, mapDispatchToProps)(Authentication);","map":{"version":3,"sources":["/media/karolina/Nowy/EAiIB/magiterka/Thesis/app/src/containers/Authentication/Authentication.js"],"names":["React","Component","Link","connect","actions","validate","TextInput","Button","Spinner","classes","Authentication","state","isSignUp","loading","dataIsValid","formData","email","value","placeholder","valid","touched","validationRules","isEmail","isRequired","password","minLength","submitHandler","event","preventDefault","setState","props","onAuth","changeHandler","formElementName","name","target","updatedData","updatedDataElement","inputIdentifier","componentDidMount","match","params","type","render","formName","formElementArray","key","push","id","config","form","map","formElement","RememberForgotBox","ForgotLink","errorMessage","error","message","Form","mapStateToPtops","auth","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport * as actions from \"../../store/actions/index\";\n\nimport validate from \"../../components/Validation/Input/Validate\";\nimport TextInput from \"../../components/UI/TextInput/TextInput\";\nimport Button from \"../../components/UI/Button/Button\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport classes from \"./Authentication.module.css\";\n\nclass Authentication extends Component {\n  state = {\n    isSignUp: true,\n    loading: false,\n    dataIsValid: false,\n    formData: {\n      email: {\n        value: \"\",\n        placeholder: \"name@domain.com\",\n        valid: false,\n        touched: false,\n        validationRules: { isEmail: false, isRequired: true },\n      },\n      password: {\n        value: \"\",\n        placeholder: \"minimum 8 characters\",\n        valid: false,\n        touched: false,\n        validationRules: { minLength: 8, isRequired: true },\n      },\n    },\n  };\n\n  submitHandler = (event) => {\n    event.preventDefault(); //prevent reload of the page\n    this.setState({ loading: true });\n    this.props.onAuth(\n      this.state.formData.email.value,\n      this.state.formData.password.value,\n      this.state.isSignUp\n    );\n  };\n\n  changeHandler = (event, formElementName) => {\n    const name = formElementName;\n    const value = event.target.value;\n\n    const updatedData = {\n      ...this.state.formData,\n    };\n\n    const updatedDataElement = {\n      ...updatedData[name],\n    };\n\n    updatedDataElement.value = value;\n    updatedDataElement.touched = true && value !== \"\";\n    updatedDataElement.valid = validate(\n      value,\n      updatedDataElement.validationRules\n    );\n\n    updatedData[name] = updatedDataElement;\n\n    let dataIsValid = true;\n    for (let inputIdentifier in updatedData) {\n      dataIsValid = updatedData[inputIdentifier].valid && dataIsValid;\n    }\n\n    this.setState({\n      dataIsValid: dataIsValid,\n      formData: updatedData,\n    });\n  };\n\n  componentDidMount() {\n    if (this.props.match.params.type === \"login\") {\n      this.setState({ isSignUp: false });\n    } else this.setState({ isSignUp: true });\n  }\n  render() {\n    let formName = this.props.match.params.type;\n    switch (formName) {\n      case \"login\":\n        formName = \"Log in\";\n        break;\n      case \"signup\":\n        formName = \"Sign up\";\n        break;\n      default: {\n        formName = <p>Error 404</p>;\n      }\n    }\n\n    const formElementArray = [];\n    for (let key in this.state.formData) {\n      formElementArray.push({ id: key, config: this.state.formData[key] });\n    }\n    let form = formElementArray.map((formElement) => (\n      <TextInput\n        key={formElement.id}\n        type={formElement.id}\n        label={formElement.id}\n        value={formElement.config.value}\n        placeholder={formElement.config.placeholder}\n        touched={formElement.config.touched}\n        valid={formElement.config.valid}\n        onChange={(event) => this.changeHandler(event, formElement.id)}\n      />\n    ));\n    form.push(\n      <Button disabled={!this.state.dataIsValid} clicked={this.submitHandler}>\n        {formName}\n      </Button>\n    );\n\n    if (!this.state.isSignUp) {\n      form.push(\n        <div className={classes.RememberForgotBox}>\n          <input type=\"checkbox\" />\n          <label>Remember Me</label>\n          <Link className={classes.ForgotLink} to=\"/recoverpassword\">\n            Forgot Password?\n          </Link>\n        </div>\n      );\n    }\n\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n\n    let errorMessage = null;\n    if (this.props.error) {\n      switch (this.props.error.message) {\n        case \"EMAIL_EXISTS\":\n          errorMessage = <p>Email already taken</p>;\n          break;\n        case \"OPERATION_NOT_ALLOWED\":\n          errorMessage = <p>Password is disabled</p>;\n          break;\n        case \"TOO_MANY_ATTEMPTS_TRY_LATER\":\n          errorMessage = <p>Too many attempts, try later</p>;\n          break;\n        case \"EMAIL_NOT_FOUND\":\n          errorMessage = <p>Email not found</p>;\n          break;\n        case \"INVALID_PASSWORD\":\n          errorMessage = <p>Invalid password</p>;\n          break;\n        case \"USER_DISABLED\":\n          errorMessage = <p>User disabled</p>;\n          break;\n        default:\n          errorMessage = <p>{this.props.error.message}</p>;\n      }\n    }\n    return (\n      <div className={classes.Form}>\n        <div>\n          <header>\n            <h1>{formName}</h1>\n          </header>\n          {errorMessage}\n          {form}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToPtops = (state) => {\n  return { loading: state.auth.loading, error: state.auth.error };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAuth: (email, password, isSignUp) =>\n      dispatch(actions.auth(email, password, isSignUp)),\n  };\n};\nexport default connect(mapStateToPtops, mapDispatchToProps)(Authentication);\n"]},"metadata":{},"sourceType":"module"}